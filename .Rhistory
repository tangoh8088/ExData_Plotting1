data(cars)
help(cars)
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x=car$speed,y=car$dist)
plot(x=cars$speed,y=cars$dist)
plot(x=cars$speed,y=car$dist,xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,subtitle="My Plot Subtitle")
plot(cars, sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
mtcars
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data=mtcars)
hist(mtcars$mpg)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(y){y$1},c(8,4,0))
evaluate(function(y){y[1]}, c(8,4,0))
evaluate(function(y){y[length(y)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram(sighs)
telegram("HELLO")
submit()
submit()
submit()
mad_libs(place=school,adjective=many,noun=truck)
mad_libs("place"=school,"adjective"=many,"noun"=truck)
mad_libs(home,many,truck)
mad_libs()
skip()
"I" "%p%" "love" "%p%" "R!"
"%p%"("I", "love", "R!")
"%p%"('I','love','R!')
'I' %p% 'love' %p% 'R!'
exit()
library(XML)
library(rJava)
R.home()
'RMySQL',type='source'
install.packages('RMySQL',type='source')
ucscdb <- dbConnect(MySQL(),user = "genome", host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscdb <- dbConnect(MySQL(),user = "genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result <- dbGetQuery(ucscdb,"show databases;"); dbDisconnect(ucscdb);
results
result
hg19 <- dbCOnnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19,"affyU133Plus2")
affyData <- dbReadTable (hg19,"affyU133Plus2")
affyData <- dbReadTable (hg19,"affyU133Plus2")
affyData <- dbReadTable (hg19,"affyU133Plus2")
affyData <- dbReadTable (hg19,"affyU133Plus2")
dbDisconnect(hg19)
dbDisconnect(hg19)
source("http://bioconductor.org/biolite.R")
source("http://bioconductor.org/bioclite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
biocLite("rhdf5")
library(rhdf5)
created = h5createfile("example.h5")
created = h5createfile("example.h5")
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5", "foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,"scale") <- "liter"
h5write(B,"example.h5", "foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5))
df = data.frame(1L:5L,seq(0,1,length.out=5), c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df,"example.h5","df")
h5ls("example.h5")
library(httr)
myapp <- oauth_app("github",key = "56b637a5baffac62cad9", secret = "8e107541ae1791259e9987d544ca568633da2ebf")
library(httr)
myapp <- oauth_app("github",key = "bcf67d9f4205f5720c51", secret = "ccaddf075bc596f27c32baccf4be624167304474")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
myapp <- oauth_app("github",key = "bcf67d9f4205f5720c51", secret = "ccaddf075bc596f27c32baccf4be624167304474")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
jason1 = content(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json2
myapp <- oauth_app("github",key = "bcf67d9f4205f5720c51", secret = "e4328f7cc3e5ef583332dde0c30b5fafe6b589e0")
rm(github_token)
rm(gtoken)
rm(jason2)
rm(jason1)
rm(json1)
rm(json2)
rm(myapp)
rm(rew)
rm(req)
myapp <- oauth_app("github",key = "bcf67d9f4205f5720c51", secret = "e4328f7cc3e5ef583332dde0c30b5fafe6b589e0")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
rm(github_token)
rm(gtoken)
rm(myapp)
myapp <- oauth_app("tangohapp",key = "bcf67d9f4205f5720c51", secret = "e4328f7cc3e5ef583332dde0c30b5fafe6b589e0")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2
http://developer.github.com/v3/oauth/oauth_endpoints("github")
myapp <- oauth_app("tangohapp",key = "bcf67d9f4205f5720c51", secret = "e4328f7cc3e5ef583332dde0c30b5fafe6b589e0")
github_token <- oauth2.0_token(oauth_endpoints("tangohapp"), myapp)
myapp <- oauth_app("github",key = "bcf67d9f4205f5720c51", secret = "e4328f7cc3e5ef583332dde0c30b5fafe6b589e0")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2
library(httr)
library(httpuv)
myapp <- oauth_app("github, key = "bcf67d9f4205f5720c51", secret = "e4328f7cc3e5ef583332dde0c30b5fafe6b589e0")
myapp <- oauth_app("github", key = "bcf67d9f4205f5720c51", secret = "e4328f7cc3e5ef583332dde0c30b5fafe6b589e0")
View(myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
library(jsonlite)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1]
stop_for_status(req)
req <- GET("https://api.github.com/rate_limit", gtoken)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1]
library(RMySQL)
library(sqldf)
install.packages("sqldf")
library(sqldf)
library(sqldf)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "survey.csv")
acs <- read.csv("survey.csv")
sqldf("select pwgtp1 from acs")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
nchar(htmlCode)
nchar(htmlCode)[[10,20,30,100]]
nchar(htmlCode)[10,20,30,100]
nchar(htmlCode)[c(10,20,30,100)]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(url,"data.csv")
?fread.fwf
?read.fwf
dataf<- read.fwf("data.csv",widths = c(15,4,1,3,5,4), header = FALSE, sep = "\t", skip=4)
View(dataf)
View(dataf)
View(dataf)
View(dataf)
dataf<- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",widths = c(12,7,4,9,4,9,4,9,4), skip=4)
sum(dataf[,4])
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<- gather(sex_class,count)
gather(students2,sex_class,count,-grade)
gather(students2,sex_class,count)
res<- gather(students2, sex_class, count, -grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
submit()
submit()
submit()
submit()
reset()
submit()
skip()
bye
bye()
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res)
separate(students2,res)
separate(res,sex_class,c("sex","class"))
submit()
students3
submit()
?spread
submit()
submit()
submit
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(status)
mutate(status=passed)
mutate(status = "passed")
mutate(passed, status=passed)
mutate(passed, status)
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
packageVersion('dplyr')
bind_rows(passed,failed)
sat
submit()
submit()
library(swirl)
swirl()
Sys.getlocalte("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy ("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19-20-12")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 7, minutes = 11, seconds = 2)
this_moment
nyc <- now(tzone="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(arrive - last_time)
how_long <- new_interval(arrive, last_time)
how_long <- new_internal(last_time, arrive)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages("ggplot2")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
low
high
histt(ppm,col="green",breaks=100)
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta", lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pm25~region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution == "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25,col="green")
hist(subset(pollution, region =="west"),col="green")
hist((subset(pollution, region =="west")),col="green")
hist((subset(pollution, region =="west"))[["pm25"]],col="green")
hist(subset(pollution,region=="west")$pm25, col = "green")
withn(pollution,plot(pollution$latitude,pollution$pm25))
with(pollution,plot(pollution$latitude,pollution$pm25))
with(pollution, plot(latitude, pm25))
with(pollution, plot(latitude, pm25),lwd=2,lty=2)
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,ppm,col= pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow=c(1,2),mar=c(5,4,2,1))
west <- subset(pollution, region=="west")
plot(west$latitude,west$pm25,main = "west")
plot(west$latitude,west$pm25,main = "West")
plot(east$latitude,east$pm25,main = "East")
?Devices
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy(png,file="geyserplot.png")
dev.cur()
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),cars$dist,"SWIRL rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region,data=state,layout=x(4,1))
xyplot(Life.Exp ~ Income | region,data=state,layout=c(4,1))
xyplot(Life.Exp ~ Income | region,data=state,layout=c(2,2))
head(mpg)
dim(mgp)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(xlab="Month",ylab="Ozone (ppb)",col.axis='blue",col.lab = "red')
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)",col.axis='blue",col.lab = "red')
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab = "red")
title(main="Ozone and Wind in New York City")
plot(airquality,plot(Wind,Ozone))
plot(airquality,Wind,Ozone))
plot(airquality,Wind~Ozone))
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind,airquality$Ozone,set="n")
plot(airquality$Wind,airquality$Ozone,set=="n")
plot(airquality$Wind,airquality$Ozone,set="n")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main = "Wind and Ozone in NYC")
may <- subset(airquality,"5")
may <- subset(airquality,Month == 5")
may <- subset(airquality,Month == 5")
may <- subset(airquality,Month == 5)
points(may,wind,ozone, color = "blue", pch = "20")
points(may$wind,may$ozone, color = "blue", pch = "20")
points(may$wind,may$ozone, color = "blue", pch = "17")
points(may$wind,may$ozone, color = "blue", pch = 17)
points(may$wind,may$ozone, col = "blue", pch = 17)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month !== 5)
notmay <- subset(airquality, Month !== 5)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind,notmay$Ozone,col="red",pch="18")
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright", pch = c(17,8),col = c("blue","red", legend = c("May","Other Months")))
legend("topright", pch = c(17,8),col = c("blue","red", legend = c("May","Other Months"))
legend("topright", pch = c(17,8),col = c("blue","red"), legend = c("May","Other Months"))
abline( v= median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Win,airquality$Ozone,main = "Ozone and Wind")
plot(airquality$Wind,airquality$Ozone,main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main="Ozone and Solar Radiation")
par(mfrow=c(1,3),mar=c(4,4,2,1),oma=c(0,0,2,0))
plot(airquality$Wind,airquality$Ozone,main = "Ozone and Wind")
plot(airquality$Solar.R,airquality$Ozone,main="Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
dat <- read.table("household_power_consumption.txt",header = TRUE, sep = ";", nrows = 1000000, na.strings = "?", stringsAsFactors = FALSE)
getwd()
dat <- read.table("household_power_consumption.txt",header = TRUE, sep = ";", nrows = 1000000, na.strings = "?", stringsAsFactors = FALSE)
dat$DateTime <- as.Date(dat$DateTime, format = "%d/%m/%Y %H:%M:%S")
dat$DateTime <- paste(dat$Date, dat$Time)
dat$DateTime <- as.Date(dat$DateTime, format = "%d/%m/%Y %H:%M:%S")
library(dplyr)
datsub <- filter(dat, DateTime >= as.Date("2007-02-01 00:00:00"), DateTime < as.Date("2007-02-03 00:00:00"))
rm(dat)
hist(datsub$Global_active_power, xlab = "Global Active Power", col = "red", main = "Global Active Power")
setwd("C:/Users/Ser Xing/ExData_Plotting1")
dev.copy(png, "plot1.png", height = 480, width = 480)
dev.off()
hist(datsub$Global_active_power, xlab = "Global Active Power (kilowatts)", col = "red", main = "Global Active Power")
dev.copy(png, "plot1.png", height = 480, width = 480)
dev.off()
plot(datsub$Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)", xlab = "")
plot(datsub$Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)")
plot(datsub$Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)", xlab = "")
plot(datsub$Global_active_power~datsub$DateTime, type = "l", ylab = "Global Active Power (kilowatts)", xlab = "")
plot(datsub$Global_active_power, datsub$DateTime, type = "l", ylab = "Global Active Power (kilowatts)", xlab = "")
plot(datsub$Global_active_power~weekdays(datsub$DateTime), type = "l", ylab = "Global Active Power (kilowatts)", xlab = "")
plot(datsub$Global_active_power~as.factor(weekdays(datsub$DateTime)), type = "l", ylab = "Global Active Power (kilowatts)", xlab = "")
plot(datsub$Global_active_power~datsub$DateTime, type = "l", ylab = "Global Active Power (kilowatts)", xlab = "")
View(datsub)
plot(datsub$DateTime, datsub$Global_active_power, type = "l", ylab - "Global Active Power (kilowatts)", xlab = "")
plot(datsub$DateTime, datsub$Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)", xlab = "")
plot(datsub$DateTime, datsub$Global_active_power, type = "c", ylab - "Global Active Power (kilowatts)", xlab = "")
plot(datsub$DateTime, datsub$Global_active_power, type = "c", ylab = "Global Active Power (kilowatts)", xlab = "")
plot(datsub$DateTime, datsub$Global_active_power, ylab = "Global Active Power (kilowatts)", xlab = "")
plot(datsub$DateTime, datsub$Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)", xlab = "")
plot(datsub$DateTime, datsub$Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)")
